# Theme Park QR System Core API Configuration
# Author: SC MASEKO 402110470
# Version: 1.0

server:
  port: 8080
  servlet:
    context-path: /api/v1
  compression:
    enabled: true
    mime-types: application/json,application/xml,text/html,text/xml,text/plain
  error:
    include-message: always
    include-binding-errors: always

spring:
  application:
    name: themepark-qr-core-api
  
  profiles:
    active: ${SPRING_PROFILES_ACTIVE:dev}
  
  datasource:
    url: ${DATABASE_URL:jdbc:postgresql://localhost:5432/themepark_qr_system}
    username: ${DATABASE_USERNAME:postgres}
    password: ${DATABASE_PASSWORD:password}
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 20
      minimum-idle: 5
      idle-timeout: 300000
      connection-timeout: 20000
      leak-detection-threshold: 60000
  
  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
        use_sql_comments: true
        jdbc:
          batch_size: 20
        order_inserts: true
        order_updates: true
    open-in-view: false
  
  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD:}
      timeout: 2000ms
      lettuce:
        pool:
          max-active: 8
          max-idle: 8
          min-idle: 0
  
  cache:
    type: redis
    redis:
      time-to-live: 600000
      cache-null-values: false
  
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: ${JWT_ISSUER_URI:http://localhost:8080}
  
  mail:
    host: ${MAIL_HOST:smtp.gmail.com}
    port: ${MAIL_PORT:587}
    username: ${MAIL_USERNAME:}
    password: ${MAIL_PASSWORD:}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
  
  servlet:
    multipart:
      max-file-size: 10MB
      max-request-size: 10MB

# JWT Configuration
jwt:
  secret: ${JWT_SECRET:mySecretKey123456789012345678901234567890}
  expiration: ${JWT_EXPIRATION:3600000}
  refresh-expiration: ${JWT_REFRESH_EXPIRATION:86400000}
  issuer: ${JWT_ISSUER:themepark-qr-system}

# Payment Configuration
payment:
  stripe:
    public-key: ${STRIPE_PUBLIC_KEY:pk_test_}
    secret-key: ${STRIPE_SECRET_KEY:sk_test_}
    webhook-secret: ${STRIPE_WEBHOOK_SECRET:whsec_}
  
# QR Code Configuration
qr:
  expiration-minutes: ${QR_EXPIRATION_MINUTES:30}
  image-size: ${QR_IMAGE_SIZE:300}
  error-correction: ${QR_ERROR_CORRECTION:M}

# Rate Limiting
rate-limit:
  enabled: true
  requests-per-hour:
    anonymous: 100
    authenticated: 1000
    staff: 5000

# Logging Configuration
logging:
  level:
    com.themepark.qrsystem: INFO
    org.springframework.security: DEBUG
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
  file:
    name: logs/themepark-qr-api.log
    max-size: 10MB
    max-history: 30

# Management and Monitoring
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
      base-path: /actuator
  endpoint:
    health:
      show-details: when-authorized
  metrics:
    export:
      prometheus:
        enabled: true

# API Documentation
springdoc:
  api-docs:
    path: /api-docs
  swagger-ui:
    path: /swagger-ui.html
    operationsSorter: method
    tagsSorter: alpha
  info:
    title: Theme Park QR System API
    description: Core API for Theme Park QR Payment & Entrance System
    version: 1.0.0
    contact:
      name: SC MASEKO
      email: admin@themepark.com

# Custom Application Properties
app:
  name: Theme Park QR System
  version: 1.0.0
  description: Core API for Theme Park QR Payment & Entrance System
  
  # Business Rules
  max-daily-visitors: ${MAX_DAILY_VISITORS:10000}
  ticket-validity-days: ${TICKET_VALIDITY_DAYS:1}
  session-timeout-minutes: ${SESSION_TIMEOUT_MINUTES:120}
  
  # File Upload
  upload:
    path: ${UPLOAD_PATH:./uploads}
    max-size: 10MB
  
  # CORS Configuration
  cors:
    allowed-origins: ${CORS_ALLOWED_ORIGINS:http://localhost:3000,http://localhost:3001}
    allowed-methods: GET,POST,PUT,DELETE,OPTIONS
    allowed-headers: "*"
    allow-credentials: true

---
# Development Profile
spring:
  config:
    activate:
      on-profile: dev
  
  datasource:
    url: jdbc:postgresql://localhost:5432/themepark_qr_system
    username: postgres
    password: password
  
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
  
  data:
    redis:
      host: localhost
      port: 6379

logging:
  level:
    com.themepark.qrsystem: DEBUG
    org.springframework.web: DEBUG

---
# Test Profile
spring:
  config:
    activate:
      on-profile: test
  
  datasource:
    url: jdbc:h2:mem:testdb
    driver-class-name: org.h2.Driver
    username: sa
    password: password
  
  jpa:
    hibernate:
      ddl-auto: create-drop
    database-platform: org.hibernate.dialect.H2Dialect
  
  h2:
    console:
      enabled: true

---
# Production Profile
spring:
  config:
    activate:
      on-profile: prod
  
  datasource:
    url: ${DATABASE_URL}
    username: ${DATABASE_USERNAME}
    password: ${DATABASE_PASSWORD}
    hikari:
      maximum-pool-size: 50
  
  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: false
  
  data:
    redis:
      host: ${REDIS_HOST}
      port: ${REDIS_PORT}
      password: ${REDIS_PASSWORD}

logging:
  level:
    com.themepark.qrsystem: INFO
    org.springframework.security: WARN
    org.hibernate.SQL: WARN

